#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of ttauri-project.
#

name: "Install Vulkan SDK"
description: "Installs the current Vulkan SDK"
inputs:
  install:
    description: "Install the SDK on true, or only set VULKAN_SDK output variable on false."
    required: true
    
outputs:
  VULKAN_SDK:
    description: "Location of the vulkan sdk"
    value: ${{ steps.vulkan-output.outputs.VULKAN_SDK }}

runs:
  using: "composite"
  steps:
    - name: ðŸ“¥ Set latest VULKAN_VERSION as environment variable
      shell: pwsh
      run: |
          echo 'VULKAN_VERSION<<EOF' >> $env:GITHUB_ENV
          curl https://vulkan.lunarg.com/sdk/latest/windows.txt >> $env:GITHUB_ENV
          echo 'EOF' >> $env:GITHUB_ENV
        
    - name: ðŸ“¥ Set VULKAN_SDK as environment variable
      shell: pwsh
      run: |
        echo VULKAN_SDK=C:\VulkanSDK\${{ env.VULKAN_VERSION }} >> $env:GITHUB_ENV

    - name: ðŸ“¥ Setup download urls VULKAN_SDK_URL & VULKAN_RUN_URL
      shell: pwsh
      run: |
        $env:BASE_URL="https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}/windows"
        echo VULKAN_SDK_URL=$env:BASE_URL/VulkanSDK-${{ env.VULKAN_VERSION }}-Installer.exe?Human=true >> $env:GITHUB_ENV
        echo VULKAN_RUN_URL=$env:BASE_URL/vulkan-runtime-components.zip?Human=true >> $env:GITHUB_ENV

    - name: ðŸ”½ Install VULKAN_SDK
      run: |
        if ( $env:INPUT_INSTALL -eq "true")
        {
          curl -L --silent --show-error --output VulkanSDK.exe %VULKAN_SDK_URL%
          VulkanSDK.exe /S
        }
         
    - name: ðŸ”½ Install VULKAN Runtime (âž” vulkan-1.dll)
      run: |
        if ( $env:INPUT_INSTALL -eq "true")
        {
          curl -L --silent --show-error --output vulkan-runtime.zip %VULKAN_RUN_URL%
          7z e vulkan-runtime.zip -o%VULKAN_SDK%\runtime\x64 */x64
        }

    - name: âœ‚ Reduce VULKAN_SDK size before caching
      if: steps.cache-vulkan.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        if ( $env:INPUT_INSTALL -eq "true")
        {
          cd ${{ env.VULKAN_SDK }}
          "Folder size before: {0:N2} MB" -f ((ls . -r | Measure-Object -Property Length -Sum).Sum / 1MB)
          Remove-Item -Recurse -Force "Bin32"
          Remove-Item -Recurse -Force "Demos"
          Remove-Item -Recurse -Force "Lib32"
          Remove-Item -Recurse -Force "Templates"
          Remove-Item -Recurse -Force "Third-Party"
          Remove-Item -Recurse -Force "Tools"
          Remove-Item -Recurse -Force "Tools32"
          "Folder size after: {0:N2} MB" -f ((ls . -r | Measure-Object -Property Length -Sum).Sum / 1MB)
        }
        
    - name: ðŸ“¤ Set outputs
      id: vulkan-output
      run: |
        echo ::set-output name=VULKAN_SDK::${{ env.VULKAN_SDK }}
        

